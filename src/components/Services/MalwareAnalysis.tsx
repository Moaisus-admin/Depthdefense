"use client";
import React, { useEffect, useRef } from "react";
import Image from "next/image";
import { useInView } from "react-intersection-observer";
import { gsap } from "gsap";
import { ScrollTrigger } from "gsap/dist/ScrollTrigger";
import { Typewriter } from "react-simple-typewriter";
import { useTranslation } from "react-i18next";
gsap.registerPlugin(ScrollTrigger);

const Malware: React.FC = () => {
  const { t } = useTranslation();
  const { ref, inView } = useInView({
    triggerOnce: true,
    threshold: 0.1,
  });

  const imageRef = useRef(null);
  useEffect(() => {
    gsap.fromTo(
      imageRef.current,
      { opacity: 0, scaleX: 0 }, // Start with no width
      {
        duration: 3, // Make the animation slower for the image
        opacity: 1, // End with full visibility
        scaleX: 1, // End with full width
        ease: "power1.out",
        scrollTrigger: {
          trigger: imageRef.current,
          start: "top center", // when the top of the trigger hits the center of the viewport
          end: "bottom center", // end after scrolling 500px beyond the start
          toggleActions: "play none none none", // don't reverse the animation
        },
      }
    );

    // ... rest of the code
  }, []);

  return (
    <div className="about-us-area pb-70  text-black  dark:bg-zinc-800">
      <div className="container mx-auto px-4 overflow-hidden">
        <h2 className="dark:text-white mt-11 text-center text-3xl">
          <Typewriter
            key={t("malware_analysis")}
            words={[t("malware_analysis")]}
            loop={1}
            cursor
            cursorStyle=""
            typeSpeed={20}
            deleteSpeed={50}
            delaySpeed={1000}
          />
        </h2>
        <p className="dark:text-white mt-6">
          <Typewriter
            key={t("malware_description")}
            words={[t("malware_description")]}
            loop={1}
            cursor
            cursorStyle=""
            typeSpeed={10}
            deleteSpeed={50}
            delaySpeed={1000}
          />
        </p>
        <div className="flex flex-wrap">
          <div className="w-full lg:w-full mb-4 lg:mb-0">
            <div className="about-img col-lg-9 m-auto">
              <div ref={imageRef}>
                <Image
                  src="/images/services/services-Ac.jpg"
                  alt="Image"
                  width={800}
                  height={345}
                  layout="responsive"
                  className="pt-[80px]"
                />
              </div>
            </div>
          </div>
        </div>
        <div className="w-full lg:w-full text-black">
          <div className="about-content">
            <div className="about-title">
              <h2 className="dark:text-white">{t("incident_responders")}</h2>
            </div>

            <ul
              ref={ref}
              className="transition-opacity duration-500 ease-in-out"
            >
              <li
                className={`shine-animation flex items-center mb-2 dark:text-white  ${
                  inView ? "slide-in" : "opacity-0"
                }`}
              >
                {t("identify_source")}
              </li>
              <li
                className={`shine-animation flex items-center mb-2 dark:text-white ${
                  inView ? "slide-in" : "opacity-0"
                }`}
              >
                {t("categorize_incidents")}
              </li>
              <li
                className={`shine-animation flex items-center mb-2 dark:text-white  ${
                  inView ? "slide-in" : "opacity-0"
                }`}
              >
                {t("improve_efficiency")}
              </li>
              <li
                className={`shine-animation flex items-center mb-2 dark:text-white ${
                  inView ? "slide-in" : "opacity-0"
                }`}
              >
                {t("evaluate_damage")}
              </li>
              <li
                className={`shine-animation flex items-center mb-2 dark:text-white ${
                  inView ? "slide-in" : "opacity-0"
                }`}
              >
                {t("enrich_processes")}
              </li>
            </ul>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Malware;
